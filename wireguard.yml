AWSTemplateFormatVersion: "2010-09-09"
Description: "Set up a wireguard VPN"

Parameters:
  VpnAmiId:
    Description: "Provide the AWS Marketplace VPN AMI ID"
    Default: "ami-06fd8a495a537da8b"
    Type: "AWS::EC2::Image::Id"
  SshKey:
    Description: "Previously created ssh key name"
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: "must be the name of an existing EC2 KeyPair."
  InstanceType:
    Default: "t3a.nano"
    Description: "Instance type"
    Type: "String"
    AllowedValues: ["t3a.nano", "t3.nano"]
  ServerTunnelSubnet:
    Default: "10.20.10.1/24"
    Description: "The network available to the tunnel."
    Type: "String"
  WireguardPort:
    Default: 51820
    Description: "The port on which the WireGuard server will listen on"
    Type: Number
    MinValue : 1150
    MaxValue : 65535
  AssociateEip:
    AllowedValues:
      - "true"
      - "false"
    Default: "true"
    Description: "This is to associate with an already created/exported EIP. Should be true unless testing."
    Type: "String"

Conditions:
  CreateAssociateEip: !Equals [!Ref "AssociateEip", "true"]

Resources:

  # Networking
  WireguardEIP:
    Type: AWS::EC2::EIP

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.30.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-vpc'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetA:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.30.10.0/24
        AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list
        Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-publicA'

  VpnSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "VPN security group created by cloudformation"
      GroupName: !Sub '${AWS::StackName} VPN access'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
          Description: SSH access
        - IpProtocol: "udp"
          FromPort: !Ref WireguardPort
          ToPort: !Ref WireguardPort
          CidrIp: "0.0.0.0/0"
          Description: Wireguard port

  ConfigStorageSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Storage Security group"
      GroupName: !Sub '${AWS::StackName}-vpn-nfs'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref VpnSecurityGroup
          Description: NFS/EFS connection

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-public'

  PublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  # Compute
  VpnInstance:
    Type: "AWS::EC2::Instance"
    DependsOn: ConfigStoreMount
    Properties:
      ImageId: !Ref "VpnAmiId"
      InstanceType: !Ref "InstanceType"
      KeyName: !Ref "SshKey"
      SubnetId: !Ref "PublicSubnetA"
      SecurityGroupIds:
        - !Ref VpnSecurityGroup
      SourceDestCheck: false
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName} server'
      UserData:
        Fn::Base64: !Sub |
          #cloud-config
          repo_update: true
          repo_upgrade: all

          packages:
          - wireguard
          - nfs-common

          write_files:
            - content: |
                #!/bin/bash -ex
                cd /etc/wireguard
                umask 077
                wg genkey | tee privatekey | wg pubkey > publickey
                PRIVATEKEY=$(cat privatekey)
                rm privatekey publickey

                cat <<EOF > "/etc/wireguard/wg0.conf"
                [Interface]
                PrivateKey = $PRIVATEKEY
                Address = ${ServerTunnelSubnet}
                ListenPort = ${WireguardPort}
                PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -t nat -A POSTROUTING -o ens5 -j MASQUERADE;
                PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -t nat -D POSTROUTING -o ens5 -j MASQUERADE;
                SaveConfig = true
                EOF
              path: /root/wireguard-setup.sh
              permissions: '0777'
            - content: |
                [Unit]
                Description = Mount remote Wireguard config store

                [Mount]
                What=10.30.10.200:/
                Where=/etc/wireguard
                Type=nfs
                Options=nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport
                # Uncomment the below if your server is real slow
                # TimeoutSec=600

                [Install]
                WantedBy=multi-user.target
              path: /etc/systemd/system/etc-wireguard.mount
            - content: |
                net.ipv4.conf.all.forwarding = 1
                net.ipv6.conf.all.forwarding = 1
              path: /etc/sysctl.d/wg.conf

          runcmd:
          - sysctl --system
          - systemctl enable etc-wireguard.mount
          - systemctl start etc-wireguard.mount
          - if [ ! -f "/etc/wireguard/wg0.conf" ]; then /root/wireguard-setup.sh ; fi
          - ufw allow 22/tcp
          - ufw allow ${WireguardPort}/udp
          - ufw --force enable
          - sed -i "s/^\(After\|Wants\)=.*/& etc-wireguard.mount/" /lib/systemd/system/wg-quick@.service
          - systemctl enable wg-quick@wg0
          - systemctl start wg-quick@wg0

  WireguardVpnEipAsso:
    Type: "AWS::EC2::EIPAssociation"
    Condition: "CreateAssociateEip"
    Properties:
      AllocationId: !GetAtt WireguardEIP.AllocationId
      InstanceId: !Ref "VpnInstance"

  # Storage
  ConfigStore:
    Type: AWS::EFS::FileSystem
    Properties: 
      BackupPolicy: 
        Status: DISABLED
      Encrypted: true
      PerformanceMode: generalPurpose
      FileSystemTags:
      - Key: Name
        Value: !Sub '${AWS::StackName} server'


  ConfigStoreMount:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref ConfigStore
      IpAddress: "10.30.10.200"
      SecurityGroups: 
        - !Ref ConfigStorageSecurityGroup
      SubnetId: !Ref "PublicSubnetA"

Outputs:
  PublicIP:
    Description: The public IP address of the deployed VPN
    Value: !Ref WireguardEIP
    Export:
      Name: !Sub 'public-ip-${AWS::StackName}'
